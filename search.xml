<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发二：插件的加载过程</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-从源码看插件的加载过程"><a href="#1-从源码看插件的加载过程" class="headerlink" title="1. 从源码看插件的加载过程"></a>1. 从源码看插件的加载过程</h1><p>插件是在节点初始化的时候加载的，下面列举出部分关键代码，以搜索服务为例来介绍插件的加载过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public Node(Environment environment) &#123;</span><br><span class="line">    this(environment, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected Node(final Environment environment, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins) &#123;</span><br><span class="line">    ......</span><br><span class="line">    // 插件服务从以下几个地方加载插件：plugins和modules文件夹、classpathPlugins集合（集合为空，可在开发时使用）</span><br><span class="line">    this.pluginsService = new PluginsService(tmpSettings, environment.configFile(), </span><br><span class="line">        environment.modulesFile(), environment.pluginsFile(), </span><br><span class="line">        classpathPlugins);</span><br><span class="line">    ......</span><br><span class="line">    // 初始化search模块，可以看到实现SearchPlugin接口的插件类将会被过滤出来</span><br><span class="line">    SearchModule searchModule = new SearchModule(settings, false,</span><br><span class="line">        pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">    ......</span><br><span class="line">    // 各个模块整合成搜索服务searchService</span><br><span class="line">    final SearchService searchService = newSearchService(clusterService, indicesService,</span><br><span class="line">        threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),</span><br><span class="line">        responseCollectorService);</span><br><span class="line">    ......</span><br><span class="line">    modules.add(b -&gt; &#123;</span><br><span class="line">        ......</span><br><span class="line">        // 注入实例</span><br><span class="line">        b.bind(SearchPhaseController.class).toInstance(new SearchPhaseController(settings,</span><br><span class="line">            searchService::createReduceContext));</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来看pluginsService的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public PluginsService(Settings settings, Path configPath, Path modulesDirectory, Path pluginsDirectory, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins) &#123;</span><br><span class="line">    ......</span><br><span class="line">    // 以classpathPlugins的形式作为参考，可以看到需要继承Plugin抽象类</span><br><span class="line">    for (Class&lt;? extends Plugin&gt; pluginClass : classpathPlugins) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，首先，我们要有一个类继承Plugin类并且某些服务需要实现相应的插件接口（旧版es只需要继承Plugin便可修改各个模块，相关接口现已弃用）才能被发现。</p><h1 id="2-搜索插件的加载过程"><a href="#2-搜索插件的加载过程" class="headerlink" title="2. 搜索插件的加载过程"></a>2. 搜索插件的加载过程</h1><p>接下来我们以搜索插件中的高亮部分为例，看看如何以插件的形式给es添加新的高亮类型。</p><p>首先是searchModule的构造函数：</p><p><img src="http://www.wziyang.cn/wordpress/wp-content/uploads/2018/07/searchModule构造函数.png" alt="img"></p><p>可以看到构造函数中注册了各种搜索模块，而其中就有高亮的注册。</p><p><img src="http://www.wziyang.cn/wordpress/wp-content/uploads/2018/07/searchModule中高亮插件加载.png" alt="img"></p><p>首先加载了3个系统自带的高亮类型，然后加载搜索插件中的高亮部分。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发一：插件种类介绍</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%80%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%A7%8D%E7%B1%BB%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%80%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%A7%8D%E7%B1%BB%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-插件开发"><a href="#1-插件开发" class="headerlink" title="1. 插件开发"></a>1. 插件开发</h1><p>ES提供两种方式用于插件开发，一种是继承Plugin抽象类，一种是继承Plugin抽象类后再实现相关的插件接口。</p><h1 id="2-插件种类"><a href="#2-插件种类" class="headerlink" title="2. 插件种类"></a>2. 插件种类</h1><p><code>ScriptPlugin</code>：脚本插件，ES默认的脚本语言是Painless，可自定义其他脚本语言，java、js等。</p><p><code>AnalysisPlugin</code>：分析插件，可扩展新的分析器，标记器，标记过滤器或字符过滤器等。</p><p><code>DiscoveryPlugin</code>：发现插件，使集群可以发现节点，如使建立在AWS上的集群可以发现节点。</p><p><code>ClusterPlugin</code>：集群插件，增强对集群的管理，如控制分片位置。</p><p><code>IngestPlugin</code>：摄取插件，增强节点的ingest功能，例如可以在ingest中通过tika解析ppt、pdf内容。</p><p><code>MapperPlugin</code>：映射插件，可添加新的字段类型。</p><p><code>SearchPlugin</code>：搜索插件，扩展搜索功能，如添加新的搜索类型，高亮类型等。</p><p><code>RepositoryPlugin</code>：存储库插件，可添加新的存储库，如S3，Hadoop HDFS等。</p><p><code>ActionPlugin</code>：API扩展插件，可扩展Http的API接口。</p><p><code>NetworkPlugin</code>：网络插件，扩展ES底层的网络传输功能。</p><p>除了明确属于不同模块的插件接口外，继承抽象类Plugin可以为索引模块添加新的功能，如添加索引、搜索监听器，新的相似度算法。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4源码启动（window环境下）</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%EF%BC%88window%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%EF%BC%88window%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-获取源码和可运行的es"><a href="#1-获取源码和可运行的es" class="headerlink" title="1. 获取源码和可运行的es"></a>1. 获取源码和可运行的es</h1><p>1.1 首先从github上把es的源码拉下来并切换分支到v6.2.4版本（ps：es不同版本源码启动过程差异可能较大）。</p><p>git clone <a href="https://github.com/elastic/elasticsearch.git" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch.git</a></p><p>git checkout v6.2.4</p><p>（本篇博客命令执行皆使用git bash）</p><p>1.2 到官网下载可运行的es</p><h1 id="2-编译源码"><a href="#2-编译源码" class="headerlink" title="2. 编译源码"></a>2. 编译源码</h1><p>es是一个gradle项目，导入idea前需执行 gradle idea 命令，不然会报错。</p><p><img src="images/源码启动/gradle_idea报错.PNG" alt="img"></p><p>使用项目自带的gradlew编译es源码</p><p>./gradlew idea</p><p>./gradlew build</p><p>（IDE是eclipse的话则将命令中idea替换成eclipse）</p><p>国内可能部分包下载不了，可添加gradle国内镜像，在用户目录下的.gradle中新建init.gradle文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">buildscript &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            maven &#123; url <span class="string">"https://maven.aliyun.com/repository/public"</span> &#125;</span><br><span class="line">jcenter()&#123; url <span class="string">'http://jcenter.bintray.com/'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">maven &#123; url <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span> &#125;</span><br><span class="line"><span class="comment">// 将jcenter的连接改为http</span></span><br><span class="line">jcenter()&#123; url <span class="string">'http://jcenter.bintray.com/'</span> &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译完成后便可用idea打开项目。</p><h1 id="3-运行es"><a href="#3-运行es" class="headerlink" title="3. 运行es"></a>3. 运行es</h1><p>如何从源码运行es？</p><p>我们先参考官网下载的es中，bin目录下的启动脚本elasticsearch，elasticsearch-env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(只列出关键部分，其余省略)</span><br><span class="line">SCRIPT=<span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line">ES_HOME=`dirname <span class="string">"<span class="variable">$SCRIPT</span>"</span>`</span><br><span class="line">ES_PATH_CONF=<span class="string">"<span class="variable">$ES_HOME</span>"</span>/config</span><br><span class="line">......</span><br><span class="line"><span class="string">"<span class="variable">$JAVA</span>"</span> \</span><br><span class="line"><span class="variable">$ES_JAVA_OPTS</span> \</span><br><span class="line">-Des.path.home=<span class="string">"<span class="variable">$ES_HOME</span>"</span> \</span><br><span class="line">-Des.path.conf=<span class="string">"<span class="variable">$ES_PATH_CONF</span>"</span> \</span><br><span class="line">-cp <span class="string">"<span class="variable">$ES_CLASSPATH</span>"</span> \</span><br><span class="line">org.elasticsearch.bootstrap.Elasticsearch \</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可见，es的启动入口为org.elasticsearch.bootstrap.Elasticsearch；</p><p>es启动需要配置两个启动参数es.path.home和es.path.conf</p><p>其中es.path.home是es服务的路径，即es项目中server目录下，es.path.conf为配置文件目录，在server目录下创建config文件夹作为配置文件目录，并直接从官网的es中copy三个配置文件（此处不详解文件具体内容）。</p><p><img src="images/源码启动/config目录下文件.PNG" alt="img"></p><p>打开idea配置两个启动参数（直接绝对路径即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=E:\......\elasticsearch\server\config</span><br><span class="line">-Des.path.home=E:\......\elasticsearch\server</span><br></pre></td></tr></table></figure><p>在idea顶层菜单打开Run&gt;Edit Configurations，配置VM options</p><p><img src="images/源码启动/配置路径.png" alt="img"></p><p>接下来我们启动试一试：org.elasticsearch.bootstrap.Elasticsearch</p><p>直接执行main方法，发现启动失败，出现几个异常：</p><p>第一个</p><p><img src="images/源码启动/没有plugin目录.PNG" alt="img"></p><p>原因是es启动时会去扫描主目录下的plugins目录，加载es插件（插件方面将在其他文章说明），所以要创建plugins目录。</p><p>第二个</p><p><img src="images/源码启动/权限问题.PNG" alt="img"></p><p>原因是用户没有操作目录的权限</p><p>直接在server目录下建立java.policy文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grant codeBase <span class="string">"file:$&#123;&#123;java.ext.dirs&#125;&#125;/*"</span> &#123;</span><br><span class="line">        permission java.security.AllPermission;</span><br><span class="line">        permission java.lang.RuntimePermission <span class="string">"createClassLoader"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">grant &#123;</span><br><span class="line">        permission java.security.AllPermission;</span><br><span class="line">        permission java.lang.RuntimePermission <span class="string">"createClassLoader"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>VM options的配置增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=E:\......\elasticsearch\server\config</span><br><span class="line">-Des.path.home=E:\......\elasticsearch\server</span><br><span class="line">-Djava.security.policy=E:\......\elasticsearch\server\java.policy</span><br></pre></td></tr></table></figure><p>第三个</p><p><img src="images/源码启动/module缺失.PNG" alt="img"></p><p>原因是相关模块的缺失，es加载为空，直接把官网的es中的modules文件夹整个复制到server目录下就行。</p><p>第四个</p><p><img src="images/源码启动/类没有.PNG" alt="img"></p><p>ExtendedPluginsClassLoader这个类并没有编译出来</p><p>至于原因，我们可以在单元测试类test/org.elasticsearch.bootstrap.BootstrapForTesting中看到这一段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (System.getProperty(<span class="string">"tests.gradle"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// intellij and eclipse don't package our internal libs, so we need to set the codebases for them manually</span></span><br><span class="line">addClassCodebase(codebases,<span class="string">"plugin-classloader"</span>, <span class="string">"org.elasticsearch.plugins.ExtendedPluginsClassLoader"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 而idea并不会打包内置的依赖，即传递依赖，在server的build.gradle中：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ......</span><br><span class="line">  compileOnly project(<span class="string">':libs:plugin-classloader'</span>)</span><br><span class="line">  testRuntime project(<span class="string">':libs:plugin-classloader'</span>)</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到plugin-classloader的编译类型是compileOnly和testRuntime，只在编译阶段编译，在运行阶段不会将这个依赖包括进来，idea是默认不会运行时不包括传递依赖的，可以在这里勾选设置启动将包括该类传递依赖</p><p><img src="images/源码启动/勾选传递依赖设置.png" alt="勾选传递依赖设置"></p><p>所有问题解决后便可以顺利启动了。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
