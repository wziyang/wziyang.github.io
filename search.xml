<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hadoop示例：wordcount</title>
      <link href="/2018/11/28/Hadoop%E7%A4%BA%E4%BE%8B%EF%BC%9Awordcount/"/>
      <url>/2018/11/28/Hadoop%E7%A4%BA%E4%BE%8B%EF%BC%9Awordcount/</url>
      
        <content type="html"><![CDATA[<p>附：Hadoop-2.9.0 fs shell：<a href="http://hadoop.apache.org/docs/r2.9.0/hadoop-project-dist/hadoop-common/FileSystemShell.html" target="_blank" rel="noopener">http://hadoop.apache.org/docs/r2.9.0/hadoop-project-dist/hadoop-common/FileSystemShell.html</a></p><h1 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h1><p><code>./start-all.sh</code></p><p>通过jps指令查看是否正常启动：</p><a id="more"></a><p><img src="https://wziyang.github.io/images/hadoop/jps.png" alt="img"></p><h1 id="在HDFS中创建input目录"><a href="#在HDFS中创建input目录" class="headerlink" title="在HDFS中创建input目录"></a>在HDFS中创建input目录</h1><p><code>hadoop fs -mkdir /input</code></p><p>创建结果：</p><p><code>hadoop fs -ls /</code></p><p><img src="https://wziyang.github.io/images/hadoop/fs_ls.png" alt="img"></p><h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>输入文件：wordcount</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world hadoop</span><br><span class="line">hello hello hadoop world hello</span><br><span class="line">hadoop world world hello hadoop</span><br></pre></td></tr></table></figure><p>上传：</p><p><code>hadoop fs -put wordcount /input</code></p><h1 id="调用wordcount示例"><a href="#调用wordcount示例" class="headerlink" title="调用wordcount示例"></a>调用wordcount示例</h1><p>调用示例：将/input/wordcount作为输入文件，并将结果输出到/output目录中（输出目录会自动创建）</p><p><code>hadoop jar /var/local/hadoop-2.9.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.0.jarwordcount /input/wordcount /output</code><br>处理过程：</p><p><img src="https://wziyang.github.io/images/hadoop/wordcount处理.png" alt="img"></p><h1 id="查看输出结果"><a href="#查看输出结果" class="headerlink" title="查看输出结果"></a>查看输出结果</h1><p>HDFS系统下多了个/output 和/tmp目录</p><p>/output目录下面有两个文件（_SUCCESS和part-r-00000），说明已经运行成功了</p><p>直接打开part-r-00000便可以查看结果</p><p><img src="https://wziyang.github.io/images/hadoop/fs_ls_output.png" alt="img"></p><p><code>hadoop fs -cat /output/part-r-00000</code></p><p><img src="https://wziyang.github.io/images/hadoop/part-r-00000.png" alt="img"></p><p>wordcount示例调试完成！</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hadoop-2.9.0，linux单机安装</title>
      <link href="/2018/11/28/Hadoop-2.9.0%EF%BC%8Clinux%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
      <url>/2018/11/28/Hadoop-2.9.0%EF%BC%8Clinux%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>CenterOS7.3，jdk1.7</p><a id="more"></a><h1 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h1><h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p><code>wget http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.9.0/hadoop-2.9.0.tar.gz</code></p><p><code>mv hadoop-2.9.0.tar.gz /var/local</code></p><p><code>tar -xzvf hadoop-2.9.0.tar.gz</code></p><h2 id="修改相关配置文件"><a href="#修改相关配置文件" class="headerlink" title="修改相关配置文件"></a>修改相关配置文件</h2><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p><code>vim /etc/profile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------Hadoop--------------------</span></span><br><span class="line">HADOOP_HOME=/var/<span class="built_in">local</span>/hadoop-2.9.0</span><br><span class="line">HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME HADOOP_CONF_DIR PATH</span><br></pre></td></tr></table></figure><p><code>source /etc/profile</code></p><h3 id="Hadoop配置文件修改"><a href="#Hadoop配置文件修改" class="headerlink" title="Hadoop配置文件修改"></a>Hadoop配置文件修改</h3><p>hadoop-2.9.0/etc/hadoop/core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9998<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hadoop-2.9.0/etc/hadoop/hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/var/local/hadoop-2.9.0/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/var/local/hadoop-2.9.0/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hadoop-2.9.0/etc/hadoop/mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hadoop-2.9.0/etc/hadoop/yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hadoop-2.9.0/etc/hadoop/hadoop-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/lib/jdk/jdk1.7.0_80</span><br></pre></td></tr></table></figure><h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><h3 id="格式化Hadoop"><a href="#格式化Hadoop" class="headerlink" title="格式化Hadoop"></a>格式化Hadoop</h3><p><code>hadoop namenode -format</code></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>./start-all.sh</code></p><p>通过jps指令查看是否正常启动：</p><p><img src="https://wziyang.github.io/images/hadoop/jps.png" alt="img"></p><h3 id="启动结果"><a href="#启动结果" class="headerlink" title="启动结果"></a>启动结果</h3><p>访问http://{server-ip}:8088</p><p><img src="https://wziyang.github.io/images/hadoop/hadoop启动结果.jpg" alt="img"></p><h2 id="关闭Hadoop"><a href="#关闭Hadoop" class="headerlink" title="关闭Hadoop"></a>关闭Hadoop</h2><p><code>./stop-all.sh</code></p><p>至此，Hadoop安装完成！</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发四：分析插件开发</title>
      <link href="/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%9B%9B%EF%BC%9A%E5%88%86%E6%9E%90%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%9B%9B%EF%BC%9A%E5%88%86%E6%9E%90%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="分析器介绍"><a href="#分析器介绍" class="headerlink" title="分析器介绍"></a>分析器介绍</h1><p>分析器内部分为<code>Analyzer</code>、<code>CharFilter</code>、<code>Tokenizer</code>、<code>TokenFilter</code>。</p><a id="more"></a><p>其中<code>Analyzer</code>由其他三部分组成，<code>Tokenizer</code>为必要部分，其他两个非必要。</p><p>数据进入分析器的流程：</p><p><img src="https://wziyang.github.io/images/插件/Signatures.svg" alt="Analyzer Pipeline"></p><ul><li><p>Analyzer：分析器，对数据进行过滤、分词等操作</p></li><li><p>CharFilter：字符过滤器，最开始处理数据，过滤指定字符，如html标签过滤</p></li><li><p>Tokenizer：分词器，对数据进行分词操作，作为Analyzer的核心</p></li><li><p>TokenFilter：分词过滤器，对分词进行过滤，如lowercase将分词中存在的大写字母过滤成小写</p></li></ul><h1 id="分词结果解析"><a href="#分词结果解析" class="headerlink" title="分词结果解析"></a>分词结果解析</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"测试test"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"测"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"试"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"test"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文本经过分词后会返回一个分词数组：</p><ul><li><p><code>token</code>表示分词</p></li><li><p><code>start_offset</code>和<code>end_offset</code>表示该分词在文本中的偏移位置</p></li><li><p><code>type</code>表示该分词的类型</p></li><li><p><code>position</code>表示分词的位置，注：match_phrase以<code>position</code>为标准</p></li></ul><h1 id="插件类"><a href="#插件类" class="headerlink" title="插件类"></a>插件类</h1><p>插件类需要继承Plugin类以及实现AnalysisPlugin接口，实现AnalysisPlugin接口可以重新其中的方法来提供指定的分析器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnalysisPlugin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">default</span> Map&lt;String, AnalysisProvider&lt;CharFilterFactory&gt;&gt; getCharFilters() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> Map&lt;String, AnalysisProvider&lt;TokenFilterFactory&gt;&gt; getTokenFilters() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> Map&lt;String, AnalysisProvider&lt;TokenizerFactory&gt;&gt; getTokenizers() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> Map&lt;String, AnalysisProvider&lt;AnalyzerProvider&lt;? extends Analyzer&gt;&gt;&gt; getAnalyzers() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tokenizer开发"><a href="#Tokenizer开发" class="headerlink" title="Tokenizer开发"></a>Tokenizer开发</h1><p>Tokenizer文件结构：</p><p><img src="https://wziyang.github.io/images/插件/分析插件uml.png" alt="分析插件uml"></p><p>插件类中重写<code>getTokenizers</code> 方法，添加分词器工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnalyzerPlugin</span> <span class="keyword">extends</span> <span class="title">Plugin</span> <span class="keyword">implements</span> <span class="title">AnalysisPlugin</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, AnalysisProvider&lt;TokenizerFactory&gt;&gt; getTokenizers() &#123;</span><br><span class="line">        Map&lt;String, AnalysisProvider&lt;TokenizerFactory&gt;&gt; tokenizers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tokenizers.put(<span class="string">"test"</span>, TestTokenizerFactory::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">return</span> tokenizers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义TokenizerFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTokenizerFactory</span> <span class="keyword">extends</span> <span class="title">AbstractTokenizerFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自己定义配置类，非必须</span></span><br><span class="line">    <span class="keyword">private</span> AnalysisConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTokenizerFactory</span><span class="params">(IndexSettings indexSettings, Environment env, String name, Settings settings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(indexSettings, name, settings);</span><br><span class="line">        <span class="comment">// 可在设置tokenizer时读取相关配置</span></span><br><span class="line">        <span class="keyword">this</span>.config = <span class="keyword">new</span> AnalysisConfig(settings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tokenizer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建tokenizer</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestTokenizer(<span class="keyword">this</span>.config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalysisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testConfig = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnalysisConfig</span><span class="params">(Settings settings)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在setting中读取配置，如果没有则默认为true</span></span><br><span class="line">        <span class="keyword">this</span>.testConfig = settings.getAsBoolean(<span class="string">"testConfig"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTestConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tokenizer：</p><p>在此之前，先看看外部对分析器的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取分析器的tokenStream，如果该分析器中只包括了Tokenizer，则tokenStream就是该分析器的Tokenizer</span></span><br><span class="line">TokenStream tokenStream = analyzer.tokenStream(fieldName, contents))；</span><br><span class="line">tokenStream.reset();</span><br><span class="line"><span class="comment">// 循环调用，每次获取一个分词</span></span><br><span class="line"><span class="keyword">while</span> (tokenStream.incrementToken()) &#123;</span><br><span class="line">    <span class="comment">// 得到分词的偏移量</span></span><br><span class="line">    OffsetAttribute attr = tokenStream.getAttribute(OffsetAttribute.class);</span><br><span class="line">&#125;</span><br><span class="line">tokenStream.end();</span><br></pre></td></tr></table></figure><p>定义Tokenizer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTokenizer</span> <span class="keyword">extends</span> <span class="title">Tokenizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分词结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);</span><br><span class="line">    <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);</span><br><span class="line">    <span class="comment">// 位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AnalysisConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTokenizer</span><span class="params">(AnalysisConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 分词前执行，如果有设置变量需要在这里清理资源</span></span><br><span class="line">        <span class="keyword">super</span>.reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将循环调用改方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">incrementToken</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 清理上一次分词的数据</span></span><br><span class="line">        clearAttributes();</span><br><span class="line"><span class="comment">// 从Reader中读出数据：input.read()，可存在局部变量之中</span></span><br><span class="line">        <span class="comment">// 存储分词信息</span></span><br><span class="line">        termAtt.append(term);</span><br><span class="line">        offsetAtt.setOffset(startOffset, endOffset);</span><br><span class="line">        posIncrAtt.setPositionIncrement(offset);</span><br><span class="line">        <span class="comment">// 返回true表示分词还没结束</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 插件 </tag>
            
            <tag> Analyzer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发三：高亮插件开发</title>
      <link href="/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E9%AB%98%E4%BA%AE%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E9%AB%98%E4%BA%AE%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>首先，我们需要继承<code>Plugin</code>类使插件可以被es初始化时候加载，然后根据实际功能具体实现不同的插件接口，重写相关方法。高亮是搜索阶段的处理，我们可以看看<code>SearchPlugin</code>里的部分代码：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SearchPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;ScoreFunctionSpec&lt;?&gt;&gt; getScoreFunctions() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;SearchExtensionSpec&lt;SignificanceHeuristic, SignificanceHeuristicParser&gt;&gt; getSignificanceHeuristics() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;SearchExtensionSpec&lt;MovAvgModel, MovAvgModel.AbstractModelParser&gt;&gt; getMovingAverageModels() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;FetchSubPhase&gt; <span class="title">getFetchSubPhases</span><span class="params">(FetchPhaseConstructionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;SearchExtSpec&lt;?&gt;&gt; getSearchExts() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Highlighter&gt; <span class="title">getHighlighters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;SuggesterSpec&lt;?&gt;&gt; getSuggesters() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;QuerySpec&lt;?&gt;&gt; getQueries() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;AggregationSpec&gt; <span class="title">getAggregations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;PipelineAggregationSpec&gt; <span class="title">getPipelineAggregations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> List&lt;RescorerSpec&lt;?&gt;&gt; getRescorers() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SearchPlugin</code>下的方法包括了搜索阶段的各种处理，其中就有我们需要的<code>getHighlighters</code>方法，我们只要实现<code>SearchPlugin</code>接口，重写<code>getHighlighter</code>方法即可。</p><p>高亮插件文件结构：</p><p><img src="https://wziyang.github.io/images/插件/高亮插件uml.png" alt="高亮插件uml"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHighlightSearchPlugin</span> <span class="keyword">extends</span> <span class="title">Plugin</span> <span class="keyword">implements</span> <span class="title">SearchPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Highlighter&gt; <span class="title">getHighlighters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回高亮器</span></span><br><span class="line">        <span class="keyword">return</span> Collections.singletonMap(TestHighlighter.NAME, <span class="keyword">new</span> TestHighlighter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要返回一个map，key-value具体对应了高亮器的唯一标识，和一个实现了Highlighter接口的高亮器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Highlighter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">HighlightField <span class="title">highlight</span><span class="params">(HighlighterContext highlighterContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canHighlight</span><span class="params">(FieldMapper fieldMapper)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Highlighter</code>接口里面就很简单了，只有两个方法，其中<code>canHighlight</code>中可以定义高亮器的使用限制条件，就像fvh需要设置<code>&quot;term_vector&quot;: &quot;with_positions_offsets&quot;</code>一样，不需要限制的话默认返回true就行；而重点就是<code>highlight</code>方法了，可以在<code>highlighterContext</code>中拿到搜索返回的内容、分析器、分词等，自己定义高亮逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 插件 </tag>
            
            <tag> Highlight </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件源码调试</title>
      <link href="/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
      <url>/2018/11/27/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>正常es测试插件必须把插件打包好并放进plugins目录中，这样是很不方便的。而在源码中开发插件（将插件代码放入es源码里面）就可以不用每次都得把插件编译打包了，org.elasticsearch.node.Node（节点类，es启动时初始化节点的各个部分）的构造函数中就存在一个入口，可以在es启动时将我们的插件类加载进去。（ps：源码启动es可以看另一篇文章）</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里传入了一个空的集合，从下面可以看出这是插件的集合</span></span><br><span class="line"><span class="keyword">this</span>(environment, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Node</span><span class="params">(<span class="keyword">final</span> Environment environment, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 节点初始化操作         </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这个入口，可以写一个简单工厂类来加载我们的插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//this(environment, Collections.emptyList());</span></span><br><span class="line">    <span class="keyword">this</span>(environment, CreatePluginClassFactory.createPlugin( <span class="string">"test"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatePluginClassFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Class&lt;? extends Plugin&gt;&gt; createPlugin(String ... pluginName) &#123;</span><br><span class="line">        Collection&lt;Class&lt;? extends Plugin&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pluginName.length; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (pluginName[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"test"</span> :</span><br><span class="line">                    <span class="comment">// 继承了Plugin的插件类</span></span><br><span class="line">                    result.add(TestPlugin.class);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样将插件类加载进去后，在源码重启es便可以调试代码。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 插件 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发二：插件的加载过程</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="从源码看插件的加载过程"><a href="#从源码看插件的加载过程" class="headerlink" title="从源码看插件的加载过程"></a>从源码看插件的加载过程</h2><p>插件是在节点（org.elasticsearch.node.Node）初始化的时候加载的，下面列举出部分关键代码，以搜索服务为例来介绍插件的加载过程：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(environment, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Node</span><span class="params">(<span class="keyword">final</span> Environment environment, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 插件服务从以下几个地方加载插件：plugins和modules文件夹、classpathPlugins集合（集合为空，可在开发时使用）</span></span><br><span class="line">    <span class="keyword">this</span>.pluginsService = <span class="keyword">new</span> PluginsService(tmpSettings, environment.configFile(), </span><br><span class="line">        environment.modulesFile(), environment.pluginsFile(), </span><br><span class="line">        classpathPlugins);</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 初始化search模块，可以看到实现SearchPlugin接口的插件类将会被过滤出来</span></span><br><span class="line">    SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">false</span>,</span><br><span class="line">        pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 各个模块整合成搜索服务searchService</span></span><br><span class="line">    <span class="keyword">final</span> SearchService searchService = newSearchService(clusterService, indicesService,</span><br><span class="line">        threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),</span><br><span class="line">        responseCollectorService);</span><br><span class="line">    ......</span><br><span class="line">    modules.add(b -&gt; &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 注入实例</span></span><br><span class="line">        b.bind(SearchPhaseController.class).toInstance(<span class="keyword">new</span> SearchPhaseController(settings,</span><br><span class="line">            searchService::createReduceContext));</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来看pluginsService的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PluginsService</span><span class="params">(Settings settings, Path configPath, Path modulesDirectory, Path pluginsDirectory, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 以classpathPlugins的形式作为参考，可以看到需要继承Plugin抽象类</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;? extends Plugin&gt; pluginClass : classpathPlugins) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，首先，我们要有一个类继承Plugin类并且某些服务需要实现相应的插件接口（旧版es只需要继承Plugin便可修改各个模块，相关接口现已弃用）才能被发现。</p><h2 id="搜索插件的加载过程"><a href="#搜索插件的加载过程" class="headerlink" title="搜索插件的加载过程"></a>搜索插件的加载过程</h2><p>接下来我们以搜索插件中的高亮部分为例，看看如何以插件的形式给es添加新的高亮类型。</p><p>首先是searchModule的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SearchModule</span><span class="params">(Settings settings, <span class="keyword">boolean</span> transportClient, List&lt;SearchPlugin&gt; plugins)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.settings = settings;</span><br><span class="line">    <span class="keyword">this</span>.transportClient = transportClient;</span><br><span class="line">    registerSuggesters(plugins);</span><br><span class="line">    <span class="comment">// 高亮加载</span></span><br><span class="line">    highlighters = setupHighlighters(settings, plugins);</span><br><span class="line">    registerScoreFunctions(plugins);</span><br><span class="line">    registerQueryParsers(plugins);</span><br><span class="line">    registerRescorers(plugins);</span><br><span class="line">    registerSorts();</span><br><span class="line">    registerValueFormats();</span><br><span class="line">    registerSignificanceHeuristics(plugins);</span><br><span class="line">    registerMovingAverageModels(plugins);</span><br><span class="line">    registerAggregations(plugins);</span><br><span class="line">    registerPipelineAggregations(plugins);</span><br><span class="line">    registerFetchSubPhases(plugins);</span><br><span class="line">    registerSearchExts(plugins);</span><br><span class="line">    registerShapes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到构造函数中注册了各种搜索模块，而其中就有高亮的注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Highlighter&gt; <span class="title">setupHighlighters</span><span class="params">(Settings settings, List&lt;SearchPlugin&gt; plugins)</span> </span>&#123;</span><br><span class="line">    NamedRegistry&lt;Highlighter&gt; highlighters = <span class="keyword">new</span> NamedRegistry&lt;&gt;(<span class="string">"highlighter"</span>);</span><br><span class="line">    highlighters.register(<span class="string">"fvh"</span>,  <span class="keyword">new</span> FastVectorHighlighter(settings));</span><br><span class="line">    highlighters.register(<span class="string">"plain"</span>, <span class="keyword">new</span> PlainHighlighter());</span><br><span class="line">    highlighters.register(<span class="string">"unified"</span>, <span class="keyword">new</span> UnifiedHighlighter());</span><br><span class="line">    highlighters.extractAndRegister(plugins, SearchPlugin::getHighlighters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unmodifiableMap(highlighters.getRegistry());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先加载了3个系统自带的高亮类型，然后加载搜索插件中的高亮部分。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 插件 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4插件开发一：插件种类介绍</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%80%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%A7%8D%E7%B1%BB%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%80%EF%BC%9A%E6%8F%92%E4%BB%B6%E7%A7%8D%E7%B1%BB%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h1><p>ES提供两种方式用于插件开发，一种是继承Plugin抽象类，一种是继承Plugin抽象类后再实现相关的插件接口。</p><a id="more"></a><h1 id="插件种类"><a href="#插件种类" class="headerlink" title="插件种类"></a>插件种类</h1><p><code>ScriptPlugin</code>：脚本插件，ES默认的脚本语言是Painless，可自定义其他脚本语言，java、js等。</p><p><code>AnalysisPlugin</code>：分析插件，可扩展新的分析器，标记器，标记过滤器或字符过滤器等。</p><p><code>DiscoveryPlugin</code>：发现插件，使集群可以发现节点，如使建立在AWS上的集群可以发现节点。</p><p><code>ClusterPlugin</code>：集群插件，增强对集群的管理，如控制分片位置。</p><p><code>IngestPlugin</code>：摄取插件，增强节点的ingest功能，例如可以在ingest中通过tika解析ppt、pdf内容。</p><p><code>MapperPlugin</code>：映射插件，可添加新的字段类型。</p><p><code>SearchPlugin</code>：搜索插件，扩展搜索功能，如添加新的搜索类型，高亮类型等。</p><p><code>RepositoryPlugin</code>：存储库插件，可添加新的存储库，如S3，Hadoop HDFS等。</p><p><code>ActionPlugin</code>：API扩展插件，可扩展Http的API接口。</p><p><code>NetworkPlugin</code>：网络插件，扩展ES底层的网络传输功能。</p><p>除了明确属于不同模块的插件接口外，继承抽象类Plugin可以为索引模块添加新的功能，如添加索引、搜索监听器，新的相似度算法。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch-6.2.4源码启动（window环境下）</title>
      <link href="/2018/11/22/Elasticsearch-6.2.4%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%EF%BC%88window%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/11/22/Elasticsearch-6.2.4%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%EF%BC%88window%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="获取源码和可运行的es"><a href="#获取源码和可运行的es" class="headerlink" title="获取源码和可运行的es"></a>获取源码和可运行的es</h1><p>1.1 首先从github上把es的源码拉下来并切换分支到v6.2.4版本（ps：es不同版本源码启动过程差异可能较大）。</p><a id="more"></a><p>git clone <a href="https://github.com/elastic/elasticsearch.git" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch.git</a></p><p>git checkout v6.2.4</p><p>（本篇博客命令执行皆使用git bash）</p><p>1.2 到官网下载可运行的es</p><h1 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h1><p>es是一个gradle项目，导入idea前需执行 gradle idea 命令，不然会报错。</p><p><img src="https://wziyang.github.io/images/源码启动/gradle_idea报错.PNG" alt="img"></p><p>使用项目自带的gradlew编译es源码</p><p>./gradlew idea</p><p>./gradlew build</p><p>（IDE是eclipse的话则将命令中idea替换成eclipse）</p><p>国内可能部分包下载不了，可添加gradle国内镜像，在用户目录下的.gradle中新建init.gradle文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">buildscript &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            maven &#123; url <span class="string">"https://maven.aliyun.com/repository/public"</span> &#125;</span><br><span class="line">jcenter()&#123; url <span class="string">'http://jcenter.bintray.com/'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">maven &#123; url <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span> &#125;</span><br><span class="line"><span class="comment">// 将jcenter的连接改为http</span></span><br><span class="line">jcenter()&#123; url <span class="string">'http://jcenter.bintray.com/'</span> &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译完成后便可用idea打开项目。</p><h1 id="运行es"><a href="#运行es" class="headerlink" title="运行es"></a>运行es</h1><p>如何从源码运行es？</p><p>我们先参考官网下载的es中，bin目录下的启动脚本elasticsearch，elasticsearch-env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(只列出关键部分，其余省略)</span><br><span class="line">SCRIPT=<span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line">ES_HOME=`dirname <span class="string">"<span class="variable">$SCRIPT</span>"</span>`</span><br><span class="line">ES_PATH_CONF=<span class="string">"<span class="variable">$ES_HOME</span>"</span>/config</span><br><span class="line">......</span><br><span class="line"><span class="string">"<span class="variable">$JAVA</span>"</span> \</span><br><span class="line"><span class="variable">$ES_JAVA_OPTS</span> \</span><br><span class="line">-Des.path.home=<span class="string">"<span class="variable">$ES_HOME</span>"</span> \</span><br><span class="line">-Des.path.conf=<span class="string">"<span class="variable">$ES_PATH_CONF</span>"</span> \</span><br><span class="line">-cp <span class="string">"<span class="variable">$ES_CLASSPATH</span>"</span> \</span><br><span class="line">org.elasticsearch.bootstrap.Elasticsearch \</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可见，es的启动入口为org.elasticsearch.bootstrap.Elasticsearch；</p><p>es启动需要配置两个启动参数es.path.home和es.path.conf</p><p>其中es.path.home是es服务的路径，即es项目中server目录下，es.path.conf为配置文件目录，在server目录下创建config文件夹作为配置文件目录，并直接从官网的es中copy三个配置文件（此处不详解文件具体内容）。</p><p><img src="https://wziyang.github.io/images/源码启动/config目录下文件.PNG" alt="img"></p><p>打开idea配置两个启动参数（直接绝对路径即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=E:\......\elasticsearch\server\config</span><br><span class="line">-Des.path.home=E:\......\elasticsearch\server</span><br></pre></td></tr></table></figure><p>在idea顶层菜单打开Run&gt;Edit Configurations，配置VM options</p><p><img src="https://wziyang.github.io/images/源码启动/配置路径.png" alt="img"></p><p>接下来我们启动试一试：org.elasticsearch.bootstrap.Elasticsearch</p><p>直接执行main方法，发现启动失败，出现几个异常：</p><p>第一个</p><p><img src="https://wziyang.github.io/images/源码启动/没有plugin目录.PNG" alt="img"></p><p>原因是es启动时会去扫描主目录下的plugins目录，加载es插件（插件方面将在其他文章说明），所以要创建plugins目录。</p><p>第二个</p><p><img src="https://wziyang.github.io/images/源码启动/权限问题.PNG" alt="img"></p><p>原因是用户没有操作目录的权限</p><p>直接在server目录下建立java.policy文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grant codeBase <span class="string">"file:$&#123;&#123;java.ext.dirs&#125;&#125;/*"</span> &#123;</span><br><span class="line">        permission java.security.AllPermission;</span><br><span class="line">        permission java.lang.RuntimePermission <span class="string">"createClassLoader"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">grant &#123;</span><br><span class="line">        permission java.security.AllPermission;</span><br><span class="line">        permission java.lang.RuntimePermission <span class="string">"createClassLoader"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>VM options的配置增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=E:\......\elasticsearch\server\config</span><br><span class="line">-Des.path.home=E:\......\elasticsearch\server</span><br><span class="line">-Djava.security.policy=E:\......\elasticsearch\server\java.policy</span><br></pre></td></tr></table></figure><p>第三个</p><p><img src="https://wziyang.github.io/images/源码启动/module缺失.PNG" alt="img"></p><p>原因是相关模块的缺失，es加载为空，直接把官网的es中的modules文件夹整个复制到server目录下就行。</p><p>第四个</p><p><img src="https://wziyang.github.io/images/源码启动/类没有.PNG" alt="img"></p><p>ExtendedPluginsClassLoader这个类并没有编译出来</p><p>至于原因，我们可以在单元测试类test/org.elasticsearch.bootstrap.BootstrapForTesting中看到这一段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (System.getProperty(<span class="string">"tests.gradle"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// intellij and eclipse don't package our internal libs, so we need to set the codebases for them manually</span></span><br><span class="line">addClassCodebase(codebases,<span class="string">"plugin-classloader"</span>, <span class="string">"org.elasticsearch.plugins.ExtendedPluginsClassLoader"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 而idea并不会打包内置的依赖，即传递依赖，在server的build.gradle中：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ......</span><br><span class="line">  compileOnly project(<span class="string">':libs:plugin-classloader'</span>)</span><br><span class="line">  testRuntime project(<span class="string">':libs:plugin-classloader'</span>)</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到plugin-classloader的编译类型是compileOnly和testRuntime，只在编译阶段编译，在运行阶段不会将这个依赖包括进来，idea是默认不会运行时不包括传递依赖的，可以在这里勾选设置启动将包括该类传递依赖</p><p><img src="https://wziyang.github.io/images/源码启动/勾选传递依赖设置.png" alt="勾选传递依赖设置"></p><p>所有问题解决后便可以顺利启动了。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 源码 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
